export interface PermittedGroup {
    exclude?: string | string[];
}
export declare type PropertyExpression = string | [string, any];
export declare type PermittedEntry = string | any[] | PermittedGroup;
export declare type Permitted = PermittedEntry[];
export declare type PermittedOrder = string[];
export declare type RequiredAncestors = string[];
export declare type RequiredContent = string[];
export interface PermittedAttribute {
    [key: string]: Array<string | RegExp>;
}
export interface MetaData {
    metadata: boolean | PropertyExpression;
    flow: boolean | PropertyExpression;
    sectioning: boolean | PropertyExpression;
    heading: boolean | PropertyExpression;
    phrasing: boolean | PropertyExpression;
    embedded: boolean | PropertyExpression;
    interactive: boolean | PropertyExpression;
    deprecated: boolean | string;
    foreign: boolean;
    void: boolean;
    transparent: boolean;
    implicitClosed?: string[];
    scriptSupporting: boolean;
    deprecatedAttributes?: string[];
    requiredAttributes?: string[];
    attributes?: PermittedAttribute;
    permittedContent?: Permitted;
    permittedDescendants?: Permitted;
    permittedOrder?: PermittedOrder;
    requiredAncestors?: RequiredAncestors;
    requiredContent?: RequiredContent;
}
export interface MetaElement extends MetaData {
    tagName: string;
    [key: string]: undefined | boolean | PropertyExpression | Permitted | PermittedOrder | PermittedAttribute | RequiredAncestors;
}
export interface MetaDataTable {
    [tagName: string]: MetaData;
}
export interface ElementTable {
    [tagName: string]: MetaElement;
}
