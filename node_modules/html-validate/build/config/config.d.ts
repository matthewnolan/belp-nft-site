import { Source } from "../context";
import { MetaTable } from "../meta";
import { Plugin } from "../plugin";
import { ConfigData } from "./config-data";
import { Severity } from "./severity";
interface Transformer {
    pattern: RegExp;
    fn: (filename: string) => Source[];
}
/**
 * Configuration holder.
 *
 * Each file being validated will have a unique instance of this class.
 */
export declare class Config {
    private config;
    private configurations;
    protected metaTable: MetaTable;
    protected plugins: Plugin[];
    protected transformers: Transformer[];
    protected rootDir: string;
    /**
     * Create a new blank configuration. See also `Config.defaultConfig()`.
     */
    static empty(): Config;
    /**
     * Create configuration from object.
     */
    static fromObject(options: ConfigData): Config;
    /**
     * Read configuration from filename.
     *
     * Note: this reads configuration data from a file. If you intent to load
     * configuration for a file to validate use `ConfigLoader.fromTarget()`.
     *
     * @param filename - The file to read from or one of the presets such as
     * `htmlvalidate:recommended`.
     */
    static fromFile(filename: string): Config;
    /**
     * Load a default configuration object.
     */
    static defaultConfig(): Config;
    constructor(options?: ConfigData);
    /**
     * Initialize plugins, transforms etc.
     *
     * Must be called before trying to use config.
     */
    init(): void;
    /**
     * Returns true if this configuration is marked as "root".
     */
    isRootFound(): boolean;
    /**
     * Returns a new configuration as a merge of the two. Entries from the passed
     * object takes priority over this object.
     *
     * @param {Config} rhs - Configuration to merge with this one.
     */
    merge(rhs: Config): Config;
    private extendConfig;
    /**
     * Get element metadata.
     */
    getMetaTable(): MetaTable;
    /**
     * @hidden exposed for testing only
     */
    static expandRelative(src: string, currentPath: string): string;
    /**
     * Get a copy of internal configuration data.
     *
     * @hidden primary purpose is unittests
     */
    get(): ConfigData;
    /**
     * Get all configured rules, their severity and options.
     */
    getRules(): Map<string, [Severity, any]>;
    /**
     * Get all configured plugins.
     */
    getPlugins(): Plugin[];
    private loadPlugins;
    private loadConfigurations;
    /**
     * Transform a source file.
     *
     * @param filename - Filename to transform (according to configured
     * transformations)
     * @return A list of extracted sources ready for validation.
     */
    transform(filename: string): Source[];
    private findTransformer;
    private precompileTransformers;
    protected findRootDir(): string;
}
export {};
